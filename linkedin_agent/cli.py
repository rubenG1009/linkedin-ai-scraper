import click
import os
from .run_agent import run_agent_with_parameters

@click.group()
def cli():
    """A CLI for the LinkedIn Scraper Agent."""
    pass

@cli.command()
def configure():
    """Interactively configure the .env file with your credentials."""
    click.echo("--- LinkedIn Agent Configuration ---")
    click.echo("This will create a .env file to store your credentials.")
    
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    env_path = os.path.join(project_root, '.env')

    if os.path.exists(env_path):
        if not click.confirm(f"\nWarning: .env file already exists at {env_path}.\nDo you want to overwrite it?"):
            click.echo("Configuration cancelled.")
            return

    # --- Gather Information ---
    linkedin_user = click.prompt("Enter your LinkedIn email", type=str)
    linkedin_pass = click.prompt("Enter your LinkedIn password", hide_input=True, confirmation_prompt=True)
    
    click.echo()
    chromedriver_path = click.prompt("Enter the absolute path to your chromedriver executable")
    
    # --- Database Credentials ---
    click.echo()
    click.echo("--- Database Configuration ---")
    db_host = click.prompt("Enter your Database Host", default="localhost")
    db_user = click.prompt("Enter your Database User", default=os.getlogin())
    db_name = click.prompt("Enter your Database Name", default=os.getlogin())

    # --- Create .env content ---
    env_content = f"""# .env - Environment variables for the LinkedIn Agent
# This file is generated by 'linkedin-agent configure' and should NOT be committed to git.

# LinkedIn Credentials
LINKEDIN_USERNAME="{linkedin_user}"
LINKEDIN_PASSWORD="{linkedin_pass}"
CHROMEDRIVER_PATH="{chromedriver_path}"

# Database Configuration
DB_HOST={db_host}
DB_USER={db_user}
DB_NAME={db_name}
"""

    # --- Write to file ---
    try:
        with open(env_path, 'w') as f:
            f.write(env_content)
        click.secho(f"\nSuccessfully created .env file at: {env_path}", fg="green")
        click.echo("You are now ready to run the agent with 'linkedin-agent run'.")
    except Exception as e:
        click.secho(f"Error: Could not write to {env_path}. Reason: {e}", fg="red")


@cli.command()
@click.option('--query', required=True, help='The search query for LinkedIn profiles (e.g., "AI Engineer").')
@click.option('--location', default='Worldwide', help='The geographical location for the search.')
def run(query, location):
    """Runs the LinkedIn agent with a specific search query and location."""
    click.echo(f"Starting agent to search for '{query}' in '{location}'...")
    run_agent_with_parameters(query, location)

if __name__ == '__main__':
    cli()
